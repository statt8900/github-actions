---
name: "Run Tests"

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - "opened"
      - "synchronize"

jobs: 
  test: 
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.9]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-root
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==1.1.11"
      - name: Configure poetry
        run: python -m poetry config virtualenvs.create false
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: python -m poetry install
      - name: test
        run: python -m pytest
      - name: precommit
        uses: pre-commit/action@v2.0.3
  set_version:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-root
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==1.1.11"
      - name: Configure poetry
        run: python -m poetry config virtualenvs.create false
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: python -m poetry install
      - name: set version
        run: python scripts/versioning.py set --version git --overwrite
      - name: setup git config
        run: |
          # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: commit
        run: |
          # Stage the file, commit and push
          git add pyproject.toml src/dbgen/__init__.py
          git commit -m "bump version"
          git push origin main